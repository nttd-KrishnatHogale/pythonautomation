import time
import pytest
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver import Keys
from selenium.webdriver.support.select import Select


@pytest.mark.usefixtures("setup_and_teardown")
class TestAssignmentOne:
    def test_landingpage_and_search(self):
        welcomemsg = self.driver.find_element(By.XPATH, "//h2[normalize-space()='Welcome to our store']")
        expected_text = "Welcome to our store"
        assert welcomemsg.text.__eq__(expected_text)
        searchbox = self.driver.find_element(By.XPATH, "(//input[@id='small-searchterms'])[1]")
        searchbox.send_keys("T-Shirt")
        self.driver.find_element(By.XPATH, "(//button[normalize-space()='Search'])[1]").send_keys(Keys.RETURN)
        product_grid = WebDriverWait(self.driver, 10).until(
            EC.presence_of_element_located((By.CLASS_NAME, "product-grid")))
        expected_text = "Oversized Women T-Shirt"
        assert product_grid.text.__contains__(expected_text)

    def test_search(self):
        self.driver.find_element(By.XPATH, "(//button[normalize-space()='Search'])[1]").send_keys(Keys.RETURN)

        try:
            WebDriverWait(self.driver, 20).until(EC.alert_is_present())
            alert = self.driver.switch_to.alert
            alttext = alert.text
            alert.accept()
            print(alttext)
        finally:
            self.driver.quit()

    def test_verify_invalid_login_message(self):
        login = self.driver.find_element(By.XPATH, "//a[normalize-space()='Log in']")
        islogin = "Log in"
        assert login.text.__eq__(islogin)
        moving_to_login = self.driver.find_element(By.XPATH, "//a[normalize-space()='Log in']")
        moving_to_login.click()
        time.sleep(5)
        email = self.driver.find_element(By.XPATH, "//input[@id='Email']")
        email.send_keys("123")
        time.sleep(5)
        loginbutton = self.driver.find_element(By.XPATH, "//button[normalize-space()='Log in']")
        loginbutton.click()
        emailerror = self.driver.find_element(By.XPATH, "//span[@id='Email-error']")
        time.sleep(10)
        errortext = "Please enter a valid email address."
        assert emailerror.text.__eq__(errortext)

    def test_verify_valid_login_message(self):
        login = self.driver.find_element(By.XPATH, "//a[normalize-space()='Log in']")
        loginpresent = "Log in"
        assert login.text.__eq__(loginpresent)
        moving_to_login = self.driver.find_element(By.XPATH, "//a[normalize-space()='Log in']")
        moving_to_login.click()
        time.sleep(5)
        email = self.driver.find_element(By.XPATH, "//input[@id='Email']")
        email.send_keys("123@abc.com")
        password = self.driver.find_element(By.XPATH, "//input[@id='Password']")
        password.send_keys("123@abc")
        submit = self.driver.find_element(By.XPATH, "//button[normalize-space()='Log in']")
        submit.click()
        time.sleep(5)
        myaccouint = self.driver.find_element(By.XPATH, "//a[@class='ico-account']")
        myaccountmsg = "My account"
        assert myaccouint.text.__eq__(myaccountmsg)

    def test_login_and_add_to_cart(self):
        login = self.driver.find_element(By.XPATH, "//a[normalize-space()='Log in']")
        loginpresent = "Log in"
        assert login.text.__eq__(loginpresent)
        moving_to_login = self.driver.find_element(By.XPATH, "//a[normalize-space()='Log in']")
        moving_to_login.click()
        time.sleep(5)
        email = self.driver.find_element(By.XPATH, "//input[@id='Email']")
        email.send_keys("123@abc.com")
        password = self.driver.find_element(By.XPATH, "//input[@id='Password']")
        password.send_keys("123@abc")
        submit = self.driver.find_element(By.XPATH, "//button[normalize-space()='Log in']")
        submit.click()
        electronicimage = self.driver.find_element(By.XPATH, "//img[@title='Show products in category Electronics']")
        electronicimage.click()
        time.sleep(3)
        selctcamera = self.driver.find_element(By.XPATH, "//img[@title='Show products in category Camera & photo']")
        selctcamera.click()
        # selectlowtohigh = driver.find_element(By.XPATH, "//option[@value='10']")
        selectlowtohigh = Select(self.driver.find_element(By.ID, "products-orderby"))
        print(type(selectlowtohigh))
        selectlowtohigh.select_by_value("10")
        time.sleep(4)
        addTocart = self.driver.find_element(By.XPATH,
                                             "//div[@class='item-grid']//div[1]//div[1]//div[2]//div[3]//div[2]//button[1]")
        addTocart.click()
        time.sleep(2)

    def test_login_and_add_to_cart_apperial(self):
        login = self.driver.find_element(By.XPATH, "//a[normalize-space()='Log in']")
        loginpresent = "Log in"
        assert login.text.__eq__(loginpresent)
        moving_to_login = self.driver.find_element(By.XPATH, "//a[normalize-space()='Log in']")
        moving_to_login.click()
        time.sleep(5)
        email = self.driver.find_element(By.XPATH, "//input[@id='Email']")
        email.send_keys("123@abc.com")
        password = self.driver.find_element(By.XPATH, "//input[@id='Password']")
        password.send_keys("123@abc")
        submit = self.driver.find_element(By.XPATH, "//button[normalize-space()='Log in']")
        submit.click()
        electronicimage = self.driver.find_element(By.XPATH, "//img[@title='Show products in category Apparel']")
        electronicimage.click()
        time.sleep(3)
        selctcamera = self.driver.find_element(By.XPATH, "//img[@title='Show products in category Shoes']")
        selctcamera.click()
        # # selectlowtohigh = driver.find_element(By.XPATH, "//option[@value='10']")
        # selectlowtohigh = Select(self.driver.find_element(By.ID, "products-orderby"))
        # print(type(selectlowtohigh))
        # selectlowtohigh.select_by_value("10")
        # time.sleep(4)
        addTocart = self.driver.find_element(By.XPATH,
                                             "/html/body/div[6]/div[3]/div/div[3]/div/div[2]/div[2]/div[2]/div/div/div[1]/div/div[2]/div[3]/div[2]/button[1]")
        addTocart.click()
        time.sleep(2)

    @pytest.mark.smoke
    def test_login_failed_register_and_add_to_cart(self):
        login = self.driver.find_element(By.XPATH, "//a[normalize-space()='Log in']")
        loginpresent = "Log in"
        assert login.text.__eq__(loginpresent)
        moving_to_login = self.driver.find_element(By.XPATH, "//a[normalize-space()='Log in']")
        moving_to_login.click()
        time.sleep(5)
        email = self.driver.find_element(By.XPATH, "//input[@id='Email']")
        email.send_keys("123@abc.com")
        password = self.driver.find_element(By.XPATH, "//input[@id='Password']")
        password.send_keys("1234@abc")
        submit = self.driver.find_element(By.XPATH, "//button[normalize-space()='Log in']")
        submit.click()
        time.sleep(5)
        validationmsg = self.driver.find_element(By.XPATH, "//div[@class='message-error validation-summary-errors']")
        print(validationmsg.text)
        assert validationmsg.text.__contains__("Login was unsuccessful. Please correct the errors and try again.")
        # if validationmsg.text == "Login was unsuccessful. Please correct the errors and try again.":
        register = self.driver.find_element(By.XPATH, "//a[normalize-space()='Register']")
        registerpresent = "Register"
        assert register.text.__eq__(registerpresent)
        moving_to_register = self.driver.find_element(By.XPATH, "//a[normalize-space()='Register']")
        moving_to_register.click()
        time.sleep(10)
        gender = self.driver.find_element(By.XPATH, "//span[@class='male']")
        gender.click()
        firstname = self.driver.find_element(By.XPATH, "//input[@id='FirstName']")
        firstname.send_keys("123")
        lastname = self.driver.find_element(By.XPATH, "//input[@id='LastName']")
        lastname.send_keys("abc")
        email = self.driver.find_element(By.XPATH, "//input[@id='Email']")
        email.send_keys("1235@abc.com")
        password = self.driver.find_element(By.XPATH, "//input[@id='Password']")
        password.send_keys("1235@abc")
        confirmpassword = self.driver.find_element(By.XPATH, "//input[@id='ConfirmPassword']")
        confirmpassword.send_keys("1235@abc")
        registerbutton = self.driver.find_element(By.XPATH, "//button[@id='register-button']")
        registerbutton.click()
        time.sleep(10)
        result = self.driver.find_element(By.XPATH, "//div[@class='result']")
        expectedresultext = "Your registration completed"
        assert result.text.__eq__(expectedresultext)
        continuebutton = self.driver.find_element(By.XPATH, "//a[normalize-space()='Continue']")
        continuebutton.click()
        time.sleep(5)
        myaccouint = self.driver.find_element(By.XPATH, "//a[@class='ico-account']")
        myaccountmsg = "My account"
        assert myaccouint.text.__eq__(myaccountmsg)
        electronicimage = self.driver.find_element(By.XPATH, "//img[@title='Show products in category Electronics']")
        electronicimage.click()
        time.sleep(3)
        selctcamera = self.driver.find_element(By.XPATH, "//img[@title='Show products in category Camera & photo']")
        selctcamera.click()
        # selectlowtohigh = driver.find_element(By.XPATH, "//option[@value='10']")
        selectlowtohigh = Select(self.driver.find_element(By.ID, "products-orderby"))
        print(type(selectlowtohigh))
        selectlowtohigh.select_by_value("10")
        time.sleep(4)
        addTocart = self.driver.find_element(By.XPATH,
                                             "//div[@class='item-grid']//div[1]//div[1]//div[2]//div[3]//div[2]//button[1]")
        addTocart.click()
        time.sleep(2)

        # electronicimage = self.driver.find_element(By.XPATH, "//img[@title='Show products in category Electronics']")
        # electronicimage.click()
        # time.sleep(3)
        # selctcamera = self.driver.find_element(By.XPATH, "//img[@title='Show products in category Camera & photo']")
        # selctcamera.click()
        # # selectlowtohigh = driver.find_element(By.XPATH, "//option[@value='10']")
        # selectlowtohigh = Select(self.driver.find_element(By.ID, "products-orderby"))
        # print(type(selectlowtohigh))
        # selectlowtohigh.select_by_value("10")
        # time.sleep(4)
        # addTocart = self.driver.find_element(By.XPATH,
        #                                      "//div[@class='item-grid']//div[1]//div[1]//div[2]//div[3]//div[2]//button[1]")
        # addTocart.click()
        # time.sleep(2)

    def test_purchase_products(self):
        login = self.driver.find_element(By.XPATH, "//a[normalize-space()='Log in']")
        loginpresent = "Log in"
        assert login.text.__eq__(loginpresent)
        moving_to_login = self.driver.find_element(By.XPATH, "//a[normalize-space()='Log in']")
        moving_to_login.click()
        time.sleep(5)
        email = self.driver.find_element(By.XPATH, "//input[@id='Email']")
        email.send_keys("123@abc.com")
        password = self.driver.find_element(By.XPATH, "//input[@id='Password']")
        password.send_keys("1234@abc")
        submit = self.driver.find_element(By.XPATH, "//button[normalize-space()='Log in']")
        submit.click()
        time.sleep(5)
        validationmsg = self.driver.find_element(By.XPATH, "//div[@class='message-error validation-summary-errors']")
        print(validationmsg.text)
        assert validationmsg.text.__contains__("Login was unsuccessful. Please correct the errors and try again.")
        # if validationmsg.text == "Login was unsuccessful. Please correct the errors and try again.":
        register = self.driver.find_element(By.XPATH, "//a[normalize-space()='Register']")
        registerpresent = "Register"
        assert register.text.__eq__(registerpresent)
        moving_to_register = self.driver.find_element(By.XPATH, "//a[normalize-space()='Register']")
        moving_to_register.click()
        time.sleep(10)
        gender = self.driver.find_element(By.XPATH, "//span[@class='male']")
        gender.click()
        firstname = self.driver.find_element(By.XPATH, "//input[@id='FirstName']")
        firstname.send_keys("123")
        lastname = self.driver.find_element(By.XPATH, "//input[@id='LastName']")
        lastname.send_keys("abc")
        email = self.driver.find_element(By.XPATH, "//input[@id='Email']")
        email.send_keys("145678@abc.com")
        password = self.driver.find_element(By.XPATH, "//input[@id='Password']")
        password.send_keys("145678@abc")
        confirmpassword = self.driver.find_element(By.XPATH, "//input[@id='ConfirmPassword']")
        confirmpassword.send_keys("145678@abc")
        registerbutton = self.driver.find_element(By.XPATH, "//button[@id='register-button']")
        registerbutton.click()
        time.sleep(10)
        result = self.driver.find_element(By.XPATH, "//div[@class='result']")
        expectedresultext = "Your registration completed"
        assert result.text.__eq__(expectedresultext)
        continuebutton = self.driver.find_element(By.XPATH, "//a[normalize-space()='Continue']")
        continuebutton.click()
        time.sleep(5)
        myaccouint = self.driver.find_element(By.XPATH, "//a[@class='ico-account']")
        myaccountmsg = "My account"
        assert myaccouint.text.__eq__(myaccountmsg)
        electronicimage = self.driver.find_element(By.XPATH, "//img[@title='Show products in category Electronics']")
        electronicimage.click()
        time.sleep(3)
        selctcamera = self.driver.find_element(By.XPATH, "//img[@title='Show products in category Camera & photo']")
        selctcamera.click()
        # selectlowtohigh = driver.find_element(By.XPATH, "//option[@value='10']")
        selectlowtohigh = Select(self.driver.find_element(By.ID, "products-orderby"))
        print(type(selectlowtohigh))
        selectlowtohigh.select_by_value("10")
        time.sleep(4)
        addTocart = self.driver.find_element(By.XPATH,
                                             "//div[@class='item-grid']//div[1]//div[1]//div[2]//div[3]//div[2]//button[1]")
        addTocart.click()
        time.sleep(4)

        shopintcart = self.driver.find_element(By.XPATH,"//span[@class='cart-label']")
        shopintcart.click()
        shopingcartheading = self.driver.find_element(By.XPATH,"//h1[normalize-space()='Shopping cart']")
        expected_text= "Shopping cart"
        assert shopingcartheading.text.__eq__(expected_text)
        checkbox= self.driver.find_element(By.XPATH,"//input[@id='termsofservice']")
        checkbox.click()
        checkout = self.driver.find_element(By.XPATH, "//button[@id='checkout']")
        checkout.click()
        # checkouttext = self.driver.find_element(By.XPATH,"//button[@id='checkout']")
        # expectedchecouttext = "Checkout"
        # assert checkouttext.text.__eq__(expectedchecouttext)
        selectcountry=Select(self.driver.find_element(By.XPATH,"//select[@id='BillingNewAddress_CountryId']"))
        print("this is selectvoutyr",selectcountry.select_by_visible_text("India"))
        lastoption =selectcountry.options.__eq__("India")
        print("lastoption", lastoption)
        # selectcountry.select_by_visible_text("India")
        selectcountry.select_by_value("133")
        selectcity = self.driver.find_element(By.XPATH,"//input[@id='BillingNewAddress_City']")
        selectcity.send_keys("kolhapur")
        addressone = self.driver.find_element(By.XPATH,"//input[@id='BillingNewAddress_Address1']")
        addressone.send_keys("kenavade")
        zipcode = self.driver.find_element(By.XPATH,"//input[@id='BillingNewAddress_ZipPostalCode']")
        zipcode.send_keys("416216")
        phonenumber = self.driver.find_element(By.XPATH,"//input[@id='BillingNewAddress_PhoneNumber']")
        phonenumber.send_keys("9807654321")
        continuebutton = self.driver.find_element(By.XPATH,"//button[@onclick='if (!window.__cfRLUnblockHandlers) return false; Billing.save()']")
        continuebutton.click()
        # shippingmethod = self.driver.find_element(By.XPATH,"//input[@id='shippingoption_0']")
        # shippingmethod.click()
        shippingmethodcontinue = self.driver.find_element(By.XPATH,"//button[@class='button-1 shipping-method-next-step-button']")
        shippingmethodcontinue.click()
        numberofcards = self.driver.find_element(By.XPATH,"//ul[@id='payment-method-block']")
        assert len(numberofcards).__eq__(2)
        paymentmethodcontinue = self.driver.find_element(By.XPATH,"//button[@class='button-1 payment-method-next-step-button']")
        paymentmethodcontinue.click()
        texttiverify = self.driver.find_element(By.XPATH,"//tbody//tr//p[1]")
        textverfy = "Mail Personal or Business Check, Cashier's Check or money order to:"
        assert textverfy.__contains__(textverfy)
        pymentcontiue = self.driver.find_element(By.XPATH,"//button[@class='button-1 payment-info-next-step-button']")
        pymentcontiue.click()
        productdisplayed = self.driver.find_element(By.XPATH,"//td[@class='product']")
        assert productdisplayed.is_displyed("Leica T Mirrorless Digital Camera")

        confirmbutton = self.driver.find_element(By.XPATH,"//button[normalize-space()='Confirm']")
        confirmbutton.click()
        confirmationtext = self.driver.find_element(By.XPATH,"//strong[normalize-space()='Your order has been successfully processed!']")
        confirmtext = "Your order has been successfully processed!"
        assert confirmationtext.text.__eq__(confirmtext)
        finalcontinue = self.driver.find_element(By.XPATH,"//button[normalize-space()='Continue']")
        finalcontinue.click()